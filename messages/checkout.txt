Hi everyone,

Thanks again for taking part in Software Carpentry (SWC) and Data Carpentry (DC) instructor training this week. In order to wrap up, we would like you to do the steps outlined below

1. Submit an exercise or diagram for one of our lessons, or improve one or more of the learning objectives.  Please read the notes about submissions at the bottom of this lesson *before* starting work, and please note that your change doesn't have to be accepted in order for you to become an instructor: the point is to make sure that you understand the process and have met the people who review material.

2. Once you have submitted, pick a SWC lesson (if you want to become a SWC instructor) and/or a DC lesson (if you want to teach DC - if you want to teach both, pick one of each) and read through it carefully.  Once you have done that, check our community calendar for an upcoming discussion session that fits your schedule, and join in.  The link for the community calendar is:

    https://calendar.google.com/calendar/embed?src=oseuuoht0tvjbokgg3noh8c47g%40group.calendar.google.com

Note that you are expected to be familiar with your chosen lesson(s) *before* this discussion session, and to ask some good questions during the session to demonstrate this.  If the discussion leader feels you have not prepared, you will encouraged to do more preparation and come back for a later discussion session.  If you are still unprepared, you will be asked to contact the header of instructor training to discuss reasons and options.

3. Once you're through the discussion session(s), sign up for a 5-minute online demonstration lesson slot on http://pad.software-carpentry.org/teaching-demos (or add yourself to the top of the pad if none of the available slots works for you).  In that, we will ask you to teach a short segment from your chosen lesson - we'll pick the starting point on the day, so you must be prepared to teach any part of your chosen lesson.  If you want to do your final demonstration(s) in a language other than English, please let us know in advance so that we can find someone to sit in.

If all goes well, we will send you your certificate, add you to our roster, and get you into the classroom as quickly as we can.

We'd like to get everyone through this within 90 days of finishing the two-day class, so please get started as soon as you can.  If you have any questions, or if family or work commitments mean that you need an extension, please mail us and we'll work something out.

Submission Guidelines

a) If you want to become a SWC instructor, or to teach both SWC and DC, you must submit your change as a GitHub pull request; if you want to become a DC instructor only, go to http://www.datacarpentry.org/instructor-checkout-exercises/, which will redirect you to a Google Doc - please append your addition to the bottom of the doc to make it easier to find.

b) Either way, please mail your instructor once your submission is in so that they can push it through the review process.

c) You only have to submit *one* change to move on to the next step, not one per Carpentry.

d) We do *not* want exercises or other material that introduce new concepts: our lessons are already full to bursting.

e) If you are writing an exercise, we strongly prefer contributions to the Data Carpentry lessons right now (since that material is much younger), or to our fledgling "Python for complete novices" lesson.  Links to all of these are at the bottom of this message.  Please:

- include a solution to your exercise (note that solutions to existing exercises that don't have any are also welcome)

- make sure exercises run on all three platforms (Windows, Mac OS X, and Linux)

- try to give the exercise a scientific theme - reversing a string isn't particularly motivational for our audience

f) If you would rather do a diagram, we are happy to take submissions to any of our lessons.  Please use SVG, since vector formats are easier to manipulate than raster formats.

g) We also appreciate improvements to our lessons' learning objectives.  In particular, we would like checked against the actual lesson content, and would also like them labelled according to the levels of Bloom's Taxonomy.

h) Please read the CONTRIBUTING.md file in the lesson you are contributing to *before* creating a submission, and format your submission similarly to the content that's already there.  (For example, lessons should include the 'challenge' style marker, while learning objectives should be in the quoted block at the top of the lesson.)

i) Remember that lesson maintainers will be getting a large number of pull requests from instructor trainees, so please take some time to write a good commit message to tell the lesson maintainer what you're trying to achieve and why you think it's useful. For example:

   04-changes: Add a 'commit --amend' exercise

   Everybody will botch a commit message at some point.  This
   exercise introduces them to an easy way to fix those mistakes.

(as a commit message and a pull-request summary) will be a lot easier for the maintainer than:

   Instructor-training assignment

Data Carpentry lessons (from http://www.datacarpentry.org/lessons/): we would prefer contributions to these right now.

- R-ecology: https://github.com/datacarpentry/R-ecology/ 
- Python-ecology: https://github.com/datacarpentry/python-ecology/ 
- SQL-ecology: https://github.com/datacarpentry/sql-ecology/ 
- OpenRefine-ecology: https://github.com/datacarpentry/OpenRefine-ecology/ 

New Software Carpentry Python lesson: https://github.com/swcarpentry/python-novice-gapminder/

This lesson is an experiment to see if we can start collaboration much earlier than we have in the past.  If you want to add to this, please submit an exercise that uses the Gapminder data set (in the "data" directory).  Please don't worry too much about formatting, and please only submit the Markdown files (not generated HTML) in pull requests.

Stable Software Carpentry lessons: https://software-carpentry.org/lessons/

We are currently accepting solutions to existing exercises, diagrams, and improvements to learning objectives.
