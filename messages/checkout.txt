Hi everyone,

Thanks again for taking part in Software Carpentry (SWC) and Data Carpentry (DC) instructor training this week. In order to wrap up, we would like you to do the steps outlined below.  The thought process behind them is:

- We want you to demonstrate that you can help us improve our lessons.  Both SWC and DC store their lessons in GitHub, but DC doesn't teach Git, so it doesn't require people to speak Git in order to become instructors.  (This is Step 1 below, which you do once.)

- If you want to teach SWC, you need to demonstrate that you've mastered one of its core lessons.  Similarly, if you want to teach DC, you need to show you've mastered one of its.  (This is Steps 2 and 3 below, which you do separately for each Carpentry.)

The steps are:

1. Submit an exercise or diagram for one of our lessons.  If you want to become a SWC instructor, or to teach both SWC and DC, you must do this as a GitHub pull request; if you want to become a DC instructor only, go to http://www.datacarpentry.org/instructor-checkout-exercises/, which will redirect you to a Google Doc - please append your addition to the bottom of the doc to make it easier to find.  Either way, please mail me once your submission is in so I can get it reviewed.  You only have to submit *one* change to move on to the next step, not one per Carpentry.

We strongly prefer contributions to the Data Carpentry lessons right now (since their material is much younger), or to our fledgling "Python for complete novices" lesson.  You can find links to the Data Carpentry lessons on http://www.datacarpentry.org/lessons/, and the Python lesson on https://github.com/swcarpentry/python-novice-gapminder.  Whatever you contribute to, and however you do it (by pull request or by adding to the Google Doc), please:

a) Read the CONTRIBUTING.md file in the lesson you are contributing to *before* creating a submission.

b) Look at how the existing exercises in that lesson are formatted, and format yours in the same way.

c) Remember that lesson maintainers will be getting a large number of pull requests from instructor trainees, so please take some time to write a good commit message so that the lesson maintainer understands what you're doing and why you think it's useful. For example:

   04-changes: Add a 'commit --amend' exercise

   Everybody will botch a commit message at some point.  This
   exercise introduces them to an easy way to fix those mistakes.

(as a commit message and a pull-request summary) will be a lot easier for the maintainer than:

   Instructor-training assignment

d) If you are submitting a diagram, please use SVG, since vector formats are easier to manipulate than raster formats.

Please note:

- We do *not* want exercises or other material that introduce new concepts: our lessons are already full to bursting.

- We accept submissions to DC for the purpose of becoming a SWC instructor.

- Your change doesn't have to be accepted in order for you to become an instructor: the point is to make sure that you understand the process and have met the people who review material.

2. Once you have submitted, pick a SWC lesson (if you want to become a SWC instructor) and/or a DC lesson (if you want to teach DC - if you want to teach both, pick one of each) and read through it carefully.  Once you've done that, sign up on http://pad.software-carpentry.org/lesson-discussion-2016 to take part in a discussion session.

Note that you are expected to be familiar with your chosen lesson(s) *before* this discussion session.  If the discussion leader feels you are not, you will encouraged to do more preparation and come back for a later discussion session.  If you are still unprepared, you will be asked to contact the header of instructor training to discuss reasons and options.

If there aren't upcoming slots on the Etherpad that work for you, please add yourself to the top and we'll set something up.  You must do this step separately for each Carpentry, and you're expected to read through the lesson(s) carefully *before* your session and show up with questions.  If the session moderator (an experienced instructor) feels you haven't done this, you'll be invited to come back to a future session.

3. Once you're through the discussion session(s), sign up for a 5-minute online demonstration lesson slot on http://pad.software-carpentry.org/teaching-demos (or add yourself to the top of the pad if none of the available slots works for you).  In that, we will ask you to teach a short segment from your chosen lesson - we'll pick the starting point on the day, so you must be prepared to teach any part of your chosen lesson.  If you want to do your final demonstration(s) in a language other than English, please let us know in advance so that we can find someone to sit in.

If all goes well, we will send you your certificate, add you to our roster, and get you on the dance floor.

We'd like to get everyone through this by the end of May, so please get started as soon as you can.  If you have any questions, or if family or work commitments mean that you need an extension, please mail me and we'll work something out.

Thanks again,
Greg

Data Carpentry lessons (from http://www.datacarpentry.org/lessons/): we would prefer contributions to these right now.

- R-ecology: https://github.com/datacarpentry/R-ecology/ 
- Python-ecology: https://github.com/datacarpentry/python-ecology/ 
- SQL-ecology: https://github.com/datacarpentry/sql-ecology/ 
- OpenRefine-ecology: https://github.com/datacarpentry/OpenRefine-ecology/ 

New Software Carpentry Python lesson: https://github.com/swcarpentry/python-novice-gapminder.

This lesson is an experiment to see if we can start collaboration much earlier than we have in the past.  If you want to add to this, please submit an exercise that uses the Gapminder data set (in the "data" directory).  Please don't worry too much about formatting, and please only submit the Markdown files (not generated HTML) in pull requests.
