Hi everyone,

Thanks again for taking part in Software Carpentry (SWC) and Data Carpentry (DC) instructor training this week. In order to wrap up, we would like you to do the steps outlined below.  The thought process behind them is:

- We want you to demonstrate that you can help us improve our lessons.  Both SWC and DC store their lessons in GitHub, but DC doesn't teach Git, so it doesn't require people to speak Git in order to become instructors.  (This is Step 1 below, which you do once.)

- If you want to teach SWC, you need to demonstrate that you've mastered one of its core lessons.  Similarly, if you want to teach DC, you need to show you've mastered one of its.  (This is Steps 2 and 3 below, which you do separately for each Carpentry.)

The steps are therefore:

1. Submit a small improvement to one of our lessons.  If you want to become a SWC instructor, or to teach both SWC and DC, you must do this as a GitHub pull request; if you want to become a DC instructor only, go to http://www.datacarpentry.org/instructor-checkout-exercises/, which will redirect you to a Google Doc - please append your addition to the bottom of the doc to make it easier to find.  Either way, please mail me once your submission is in so I can get it reviewed.  You only have to submit *one* change to move on to the next step, not one per Carpentry, and we strongly prefer contributions to Data Carpentry right now (since their lessons are much younger).

2. If you want to teach DC, pick one of its lessons (possibly the one you chose for step 1, but not necessarily) and sign up on http://pad.software-carpentry.org/lesson-discussion-2016 to take part in an hour-long discussion session about it.  Similarly, if you want to teach SWC, pick one of its lessons and sign up for a discussion session about it (same Etherpad).  If there aren't upcoming slots on the Etherpad that work for you, please add yourself to the top and we'll set something up.  You must do this step separately for each Carpentry, and you're expected to read through the lesson(s) carefully *before* your session and show up with questions.  If the session moderator (an experienced instructor) feels you haven't done this, you'll be invited to come back to a future session.

3. Once you're through the discussion session(s), sign up for a 5-minute online demonstration lesson slot on http://pad.software-carpentry.org/teaching-demos (or add yourself to the top of the pad if none of the available slots works for you).  In that, we will ask you to teach a short segment from your chosen lesson - we'll pick the starting point on the day, so you will need to be familiar with the whole lesson.  If that goes well, we will send you your certificate, add you to our roster, and get you on the dance floor.

Your change can be a fix to the existing material, a new exercise, or a diagram of some kind (preferably in a vector format like SVG, but we'll take anything).  We are *not* presently accepting material with new concepts: the lessons are full to bursting as it is, and our rule is that new stuff can only be added if we can identify something to take out.  (Note: refactorings that rearrange the order of material are also welcome.)

Your change doesn't have to be accepted in order for you to become an instructor - the point is to make sure that you understand the process and have met the people who review material.  If you want to do your final demonstration(s) in a language other than English, please let us know in advance so that we can find someone to sit in.

We'd like to get everyone through this by the end of May, so please get started as soon as you can.  If you have any questions, or if family or work commitments mean that you need an extension, please mail me and we'll work something out.

Thanks again,
Greg

DC Lessons (from http://www.datacarpentry.org/lessons/): we would prefer contributions to these right now.

- R-ecology: https://github.com/datacarpentry/R-ecology/ 
- Python-ecology: https://github.com/datacarpentry/python-ecology/ 
- SQL-ecology: https://github.com/datacarpentry/sql-ecology/ 
- OpenRefine-ecology: https://github.com/datacarpentry/OpenRefine-ecology/ 

New Python lesson: https://github.com/swcarpentry/python-novice-gapminder.  This lesson is an experiment to see if we can start collaboration much earlier than we have in the past.  If you want to add to this, please submit an exercise that uses the Gapminder data set (in the "data" directory).  Please don't worry too much about formatting, and please only submit the Markdown files (not generated HTML) in pull requests.

SWC Lessons (from http://software-carpentry.org/lessons/): these are pretty mature, and have had their tires kicked a lot by other trainees, so they need the least attention.  However, if you want to go through http://software-carpentry.org/blog/categories/#debriefing and pull out a few pieces of advice to add to the instructor's guide for any of these lessons, you would be my new best friend...

- Unix shell: https://github.com/swcarpentry/shell-novice
- Git: https://github.com/swcarpentry/git-novice
- Python: https://github.com/swcarpentry/python-novice-inflammation
- R: https://github.com/swcarpentry/r-novice-inflammation or https://github.com/swcarpentry/r-novice-gapminder
- SQL: https://github.com/swcarpentry/sql-novice-survey
