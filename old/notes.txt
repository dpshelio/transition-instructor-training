## Misconceptions

people are good at compartmentalizing knowledge
- "what do I think, or what's going to get me the grade?"

## Activating Prior Knowledge

problem: cards have A, 6, M, 7, rule is "if there's a vowel on one side, there must be an even number on the other"
Q: smallest set of cards to turn over to check that this is true?
A: A & 7, but hard

problem: 16, Coke, beer, 23, rule is "must be over 21 to drink alcohol"
- isomorphic, but higher success rate
- more tangible and more familiar

*transference* requires *activation*

peer instruction gives two opportunities to activate prior knowledge (initial thinking & during discussion)

example: relate what we're doing with shell or Python to what they did with GUI or spreadsheet

Schwartz & Bransford (1998) demo then explanation creates "a time for telling"
- generating student interest

problem with computing: we don't have physical experience to activate
- nothing equivalent to "throw a ball in the air and then it drops"

good problem: iron block on block of ice in bathtub

## Building Adaptive Expertise

graph axes are efficiency and innovation (Bransford et al 2000)
novice is low in both
"routine expert" is high efficiency, low innovation (maybe "competent practitioner"?)
"adaptive expert" is high both
- routine: know the solution strategy, "just" need to apply it
- adaptive: need to figure out the solution strategy
- routine doesn't tend to work in real world (context lacking)
- Q: can someone be low efficiency but high innovation? (good Q for instructor training course)

- distinguish between exercises and problems
  - exercise is application of bounded solution strategy
  - problem requires meta thinking
  - open-ended questions needed to develop skill with the latter
  - want questions that permit multiple solution strategies

## Role of Knowledge Organization

- hierarchical study aids recall: chunking

deep patterns
- novices recognize superficial features ("this is an inclined plane problem")
- experts recognize deep structure/solution method ("this is a conservation of energy problem")

- knowledge organization formed by novices may not be helpful (since it's unguided)
- we need to guide their organization, as well as giving them things to organizing
  - i.e., give one level of meta

- Warren Code's number-to-shape example
  - without organizing principle, have to memorize
  - with organizing principle, remember one *pattern* and everything else makes sense
- Mendelian genetics ratios
  - if you understand meiosis and probability, the numbers are "obvious"

- find reference to Ashley Cetnar's work
- # of connections in concept map to key concepts correlated well with performance on tests

- give them the diagram *beforehand*: http://www.futurity.org/diagrams-learning-939352/

## Miscellaneous

From Mel Chua http://blog.melchua.com/2013/10/07/edupsych-for-hacker-schoolers-v-1-1-presentation-slides/
- content (goal)
- then assessment
- then pedagogy (activity)
- http://www.scribd.com/doc/106526138/Edpsych-50-years-on-one-page
- http://www.scribd.com/doc/110026725/Behaviorist-Cognitive-and-Situative-Perspectives-on-Design-Learning

- Willingham: principles are useless and unlearnable without facts to connect and push around
  - not just a matter of examples: principles are connections, and you can't connect things if you don't have things

- mention Scanlan 1989 when talking about concept maps and other graphical representations of knowledge
- also mention disabilities

- try to incorporate PeerWise https://peerwise.cs.auckland.ac.nz/

- from http://www.upworthy.com/she-turned-code-into-spells-and-the-results-are-very-harry-potter-in-the-best-way
  - "chocolate covered broccoli"
  - you shouldn't have to stop learning to play the game, or stop playing the game to learn
  - similarly, you shouldn't have to stop doing science to code, or stop coding to do science

- see http://mitadmissions.org/blogs/entry/picture-yourself-as-a-stereotypical-male

- make sure everyone understands Meyer-Briggs is crap

*   bridge
    *   we don't (yet) do summative in SWC/DC
    *   but we need formative's feedback to control pace
    *   and we can use both to design lessons
*   understanding by design
    1.  goals: what do we want people to understand?
    2.  design the summative assessment: how will learners demonstrate learning?
    3.  design the formative assessments: how will they practice *and* how will instructors tell if they're making progress?
    4.  close the gap between what they know and what they need to know for each formative assessment
    *   comment: having a shared method is more important than what the method is...
*   "But isn't this teaching to the test?"
    *   James Scott's "Seeing Like a State": large organizations prefer uniformity to productivity
        *   Centralization isn't always bad: cf. segregation in the South
    *   Who has the power and how is it used?
        *   Teachers using it to design lessons *or* central organization using it to rate teachers?
	*   Are teachers just being measured, or helped to improve?  We'll return to this later...

https://wvde.state.wv.us/teach21/ExamplesofFormativeAssessment.html

https://www.youtube.com/watch?v=1i8ylq4j_EY

http://www.doctornerdlove.com/2015/06/how-to-share-your-unpopular-opinion-without-being-an-asshole/

https://medium.com/salesforce-ux/7-things-every-designer-needs-to-know-about-accessibility-64f105f0881b

http://www.nap.edu/catalog/18687/reaching-students-what-research-says-about-effective-instruction-in-undergraduate

https://onlinelearninginsights.wordpress.com/2015/07/21/make-your-teaching-stick-with-ideas-from-make-it-stick-the-science-of-successful-learning/

http://akaptur.com/blog/2015/10/10/effective-learning-strategies-for-programmers/

http://boingboing.net/2015/10/12/the-myers-briggs-personality-t.html

https://iad4learnteach.wordpress.com/2015/10/30/teachable-moments-active-learning-in-exams/

https://computinged.wordpress.com/2015/11/04/what-does-a-cs-methods-class-look-like/

http://www.reducingstereotypethreat.org/definition.html

https://dynamicecology.wordpress.com/2014/04/28/stereotype-threat-a-summary-of-the-problem/

https://twitter.com/programmingcom/status/471080343877853185

https://twitter.com/tpoi/status/509846902737625088

http://hechingerreport.org/content/ed-tech-promoters-need-understand-us-learn_16821/

https://theconversation.com/seven-great-teaching-methods-not-backed-up-by-evidence-33647

http://www.learning-theories.com/

https://modelviewculture.com/pieces/unlocking-the-invisible-elevator-accessibility-at-tech-conferences

Using Bloom's Taxonomy to write learning objectives:
http://teaching.uncc.edu/sites/teaching.uncc.edu/files/media/files/file/GoalsAndObjectives/BloomWritingObjectives.pdf

Having a static, non colored version of the Etherpad notes available
to look at during class would be great, brain overload happens pretty
quickly.  Bolded headers, or more whitespace would help to create some
additional sense of structure.

Piazza got overwhelming toward the end, too many tabs, they fell off
the end, and I couldn't figure out how to access them any more.  One
thing that I was thinking of as a thing to try for next time was to
have a folder just for each week, and then have one post for each
person, with each question answer as a subsection (1, 2, 3, etc.)

----------------------------------------


Dunning-Kruger Effect:
http://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect

Guzdial blog post about teaching computing when people are ready:
http://computinged.wordpress.com/2012/09/07/teaching-cs-in-schools-with-meaning-contexts-and-problems-come-first/

Michael Pershan: what if Khan Academy was made in Japan?
https://www.youtube.com/watch?v=CHoXRvGTtAQ#t=284

Dan Meyer on what Silicon Valley gets wrong about math education:
http://blog.mrmeyer.com/2012/what-silicon-valley-gets-wrong-about-math-education-again-and-again/

Alex Reinhart: Shut up and listen to your students
http://www.refsmmat.com/articles/shutup.html

Mark Chu-Carroll: Everyone should learn to program and programming is hard
http://scientopia.org/blogs/goodmath/2012/10/05/everyone-should-program-or-programming-is-hard-both/

Chris Long: Flipped Classrooms: ASQ Before You Teach
http://learning.instructure.com/2012/10/flipped-asq/

Guzdial on the need for PCK
http://computinged.wordpress.com/2012/02/24/doubts-of-my-students-expert-teaching-is-no-better-than-good-enough-teaching/

Guzdial on culture and pedagogy
http://computinged.wordpress.com/2012/12/21/the-bigger-issues-in-learning-to-code-culture-and-pedagogy/

On beyond sticky notes
http://teaching.software-carpentry.org/2013/01/18/when-the-sticky-goes/

Pickens on writing learning objectives
http://michigancomputes.wordpress.com/2013/01/16/how-to-write-good-learning-objectives/

What Americans keep ignoring about Finland's School Success
http://www.theatlantic.com/national/archive/2011/12/what-americans-keep-ignoring-about-finlands-school-success/250564/

The Myth of Learning Styles
http://www.changemag.org/Archives/Back%20Issues/September-October%202010/the-myth-of-learning-full.html

Guzdial on Victor
http://worrydream.com/LearnableProgramming/
http://computinged.wordpress.com/2012/09/28/learnable-programming-thinking-about-programming-languages-and-systems-in-a-new-way/

## My Posts

Organizing Knowledge: http://teaching.software-carpentry.org/2012/09/03/week-1-organizing-knowledge/

Motivation: http://teaching.software-carpentry.org/2012/09/09/week-2-motivation/

Example of a good teaching tip: http://teaching.software-carpentry.org/2012/11/09/an-example-of-a-good-teaching-tip/

Examples of in-class questions from Elizabeth Patitsas
http://teaching.software-carpentry.org/2013/02/24/some-notes-on-assessment-questions/

From How to What:
http://teaching.software-carpentry.org/2013/04/18/from-how-to-what/

Welcome, Goals, and Concept Maps
http://teaching.software-carpentry.org/2013/05/25/round-5-1-welcome-goals-and-concept-maps/

Screencast advice
http://teaching.software-carpentry.org/2013/09/14/round-6-3-screencasts/

What Sir Ken Got Wrong
http://teaching.software-carpentry.org/2013/10/27/reading-what-sir-ken-got-wrong/

Wrapping Up Round 7 (nice image)
http://teaching.software-carpentry.org/2014/02/07/wrapping-up-round-7/

A Few Short Guides
http://teaching.software-carpentry.org/2014/02/03/a-few-short-guides/

Helping Teachers Think Like the Web
http://teaching.software-carpentry.org/2014/03/28/helping-teachers-think-like-the-web/

Screencast Questions
http://teaching.software-carpentry.org/2014/03/25/round-8-4-wrap-up/

Opening Lecture
http://teaching.software-carpentry.org/2014/04/25/round-9-1-concept-maps/
http://teaching.software-carpentry.org/2014/06/13/round-10-introductions-and-concept-maps/

What Everyone in Tech Really Ought to Know About Education
http://teaching.software-carpentry.org/2014/05/07/absolutely-positively/

Motivation Lecture
http://teaching.software-carpentry.org/2014/05/22/motivation-and-screencasts-2/
http://teaching.software-carpentry.org/2014/06/06/motivation-and-live-teaching/
http://teaching.software-carpentry.org/2014/06/26/from-concept-maps-to-motivation/
